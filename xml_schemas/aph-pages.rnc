start = element hansard {
	element page {
		(element meta { start-of-transcript-meta }, element content { start-of-transcript-content }) | 
		(element meta { start-of-business-meta }, element content { start-of-business-content }) | 
		(element meta { speech-meta }, element content { speech-content }) | 
		(element meta { procedural-text-meta }, element content { procedural-text-content }) | 
		(element meta { division-meta }, element content { division-content }) | 
		(element meta { adjournment-meta }, element content { adjournment-content }) | 
		(element meta { questions-without-notice-meta }, element content { questions-without-notice-content }) | 
		(element meta { questions-in-writing-meta }, element content { questions-in-writing-content }) | 
		(element meta { questions-other-meta }, element content { questions-other-content }) | 
		(element meta { petition-meta }, element content { petition-content }) | 
		(element meta { misc-meta }, element content { misc-content })
	}*
}

common-metadata =
	element main-committee { "Yes" | "No" } &
	element size { text } &
	element proof { "Yes" | "No" } &
	element source { "House" } &
	element database { "House Hansard" } &
	element date { text } &
	element page { xsd:integer }?
	
######

petition-meta =
	element type { "Petition" } &
	element context { "Petitions" } &
	element presenter { text } &
	common-metadata

start-of-business-meta =
	element type { "Start of Business" } &
	element context { "Start of Business" } &
	common-metadata
	
start-of-transcript-meta =
	element type { "Start of Transcript" } &
	element context { "Start of Transcript" } &
	common-metadata

speech-meta =
	element type { "Speech" } &
	element context { text } &
	common-metadata &
	
	element speaker { text } &
	
	# Optional metadata
	element interjector { text }? &
	element stage { text }?

procedural-text-meta =
	element type { "Procedural text" } &
	element context { text }? &
	common-metadata &

	# Optional metadata
	element interjector { text }? &
	element stage { text }?

division-meta =
	element type { "Division" } &
	element context { text } &
	common-metadata &
	
	# Optional metadata
	element stage { text }?

adjournment-meta =
	element type { "Adjournment" } &
	element context { "Adjournment" } &
	common-metadata

questions-without-notice-meta =
	element type { "Question" } &
	element context { "Questions Without Notice" } &
	common-metadata &
	
	element questioner { text } &

	# Optional metadata
	element responder { text }? &
	element interjector { text }? &
	element question_no { text }?

questions-in-writing-meta =
	element type { "Question" } &
	element context { "Questions in Writing" | "Answers to Questions on Notice" } &
	common-metadata &
	
	element questioner { text } &

	# Optional metadata
	element responder { text }? &
	element interjector { text }? &
	element question_no { text }?
	
questions-other-meta =
	element type { "Question" } &
	element context { "Questions to the Speaker" |
		"Requests for detailed information" | "REQUESTS FOR DETAILED INFORMATION" |
		"Privilege" | "MISCELLANEOUS" } &
	common-metadata &
	
	element questioner { text } &

	# Optional metadata
	element responder { text }? &
	element interjector { text }? &
	element question_no { text }?
	
misc-meta =
	element context { text } &
	common-metadata &
	
	# Optional metadata
	element stage { text }?

#######

misc-content =
	hansard-titles,
	div-motionnospeech+

questions-without-notice-content =
	element div {
		attribute class { "hansardtitlegroup" },
		element div {
			attribute class { "hansardtitle" },
			"QUESTIONS WITHOUT NOTICE"
		}
	},
	div-hansardsubtitlegroup,
	div-question-or-answer+,
	(div-motionnospeech | p | p-paraitalic | div-subspeech | table-division)*

questions-in-writing-content =
	element div {
		attribute class { "hansardtitlegroup" },
		element div {
			attribute class { "hansardtitle" },
			"QUESTIONS IN WRITING"
		}
	},
	div-hansardsubtitlegroup,
	element div {
		attribute class { "questionnumber" },
		text
	},
	div-question-or-answer+

questions-other-content =
	element div {
		attribute class { "hansardtitlegroup" },
		element div {
			attribute class { "hansardtitle" },
			("QUESTIONS TO THE SPEAKER" | "REQUEST FOR DETAILED INFORMATION" | "PRIVILEGE" )
		}
	},
	div-hansardsubtitlegroup?,
	div-question-or-answer+

adjournment-content =
	element div {
		attribute class { "adjournment" },
		element p { text }
	}

division-content =
	hansard-titles,
	element p { text }+,
	table-division,
	(element p { text } | p-parablock)+,
	html-table?,
	element p { text }*

procedural-text-content =
	hansard-titles?,
	(div-subspeech | div-quote | p-parablock | p-paraitalic | p-parabold | p-block | div-motionnospeech | div-amendments |
		html-table | html-list | p | div-motion | b-paragraph | div-question-or-answer )+

speech-content =
	hansard-titles,
	div-speech

start-of-transcript-content =
	element div {
		attribute class { "titlepage" },
		element div {
			attribute class { "crest" },
			element img {
				attribute src { text },
				attribute alt { text }
			}
		},
		element div { attribute class { "mainheading" }, text },
		element div { attribute class { "hansardtitle" }, text }?,
		element div { attribute class { "date" }, text },
		element div { attribute class { "sessioninfo" }, text }+,
		element div { attribute class { "authority" }, text },
		element div { attribute class { "proof" }, text }?
	}

start-of-business-content =
	element div {
		attribute class { "businessStart" },
		element div { attribute class { "bsDate" }, text },
		element p { text }?,
		element div {
			attribute class { "separator" },
			element hr { attribute width { "25%" } }
		}?,
		element p {
			element b { text }+ &
			text
		}*
	}

petition-content =
	element div {
		attribute class { "subsection" },
		element div {
			attribute class { "subsection0" },
			(div-quote | p-parablock | p-block )+,
			div-presenter+,
			p-block?
		}
	}

############

div-presenter =
	element div {
		attribute class { "presenter" },
		(element span {
			attribute class { "talkername" },
			element a {
				attribute href { text }?,
				text
			}
		} &
		text*)
	}

div-amendments =
	element div {
		attribute class { "amendments" },
		element div { 
			attribute class { "amendment0" | "amendment1" },
			element p {
				attribute class { "paraParlAmend" | "paraItemHead" | "paraItem" | "parasubsection" | "paraindenta" | "paraindentii" |
					"paraDefinition" | "parahdg5s" }?,
				marked-text
			}+
		}+
	}

table-division =
	element table {
		attribute class { "division" },
		attribute border { "1" },
		attribute width { "100%" },
		element tr {
			element th {
				attribute valign { "top" },
				attribute colspan { xsd:integer },
				(
				element span {
					attribute style {"color: green;" | "color: red;"},
					text
				}* &
				text*
				)
			}+
		}+,
		element tr {
			element td { text }+
		}+
	}

div-motionnospeech =
	element div {
		attribute class { "motionnospeech" },
		element span {
			attribute class { "speechname" },
			text
		},
		text,
		element span {
			attribute class { "speechelectorate" },
			text
		},
		text,
		element span {
			attribute class { "speechrole" },
			text
		},
		text,
		element span {
			attribute class { "speechtime" },
			text
		},
		marked-text,
		(html-table | div-motion | div-amendments | div-subspeech | div-quote | p-block | p-parablock | p-paraitalic | b-paragraph | p)*
	}

div-motion =
	element div {
		attribute class { "motion" },
		(p | p-parablock | html-definition-list | html-table )+
	}

hansard-titles =
	div-hansardtitlegroup, div-hansardsubtitlegroup?

div-hansardtitlegroup =
	element div {
		attribute class { "hansardtitlegroup" },
		element div {
			attribute class { "hansardtitle" },
			text
		}+
	}

div-hansardsubtitlegroup =
	element div {
		attribute class { "hansardsubtitlegroup" },
		element div {
			attribute class { "hansardsubtitle" },
			text
		}*
	}
	
p-parabold =
	element p {
		attribute class { "parabold" },
		text
	}
	
p-paraitalic =
	element p {
		attribute class { "paraitalic" },
		(
		element b { text }* &
		text+
		)
	}

p-parablock =
	element p {
		attribute class { "parablock" },
		marked-text
	}

p-block =
	element p {
		attribute class { "block" },
		marked-text
	}

p =
	element p {
		marked-text
	}

div-quote =
	element div {
		attribute class { "quote" },
		(p-parablock | p | p-parabold | html-definition-list | html-list | html-table)*
	}

html-table =
	element table {
		attribute border { xsd:integer },
		element tr {
			element td {
				attribute valign { text },
				attribute style { text }?,
				attribute colspan { xsd:integer }?,
				element p {
					attribute class { "parasmalltableleft" | "parasmalltablejustified" }?,
					marked-text
				}*,
				div-quote?
			}+
		}+
	}

html-list =
	element ul {
		element li { marked-text }*
	}

html-definition-list =
	element dl {
		(element dt { text },
		element dd {
			html-definition-list* &
			html-table* &
			element p {
				attribute style { "text-indent: 0;" },
				marked-text+
			}* &
			html-list* &
			marked-text*
		})+
	}

b-paragraph =
	element b {
		element p { text },
		element hr { empty }
	}


div-question-or-answer =
	element div {
		attribute class { "speech0" | "speech1" },
		element div {
			attribute class { "speechType" },
			("Question" | "Answer")
		},
		p-talker,
		(div-quote | div-motion | div-subspeech |
			b-paragraph | html-table | 
			p | p-block | p-parablock | p-paraitalic)*
	}

div-speech =
	element div {
		attribute class { "speech0" },
		element div {
			attribute class { "speechType" },
			"Speech"
		},
		p-talker,
		(div-quote | div-motion | div-subspeech | div-amendments |
			b-paragraph | html-table | html-list | 
			p | p-block | p-parablock | p-paraitalic | p-parabold)*
	}

marked-text =
	element a {
		attribute href { text }?,
		text
	}* &
	element b {
		element i { text }* &
		text*
	}* &
	element i { text }* &
	element img {
		attribute src { text }
	}* &
	text*

p-talker =
	element p {
		element span {
			attribute class { "talkername" },
			element a {
				attribute href { text }?,
				text
			}
		},
		marked-text?,
		element span {
			attribute class { "talkerelectorate" },
			text
		}?,
		marked-text?,
		element span {
			attribute class { "talkerrole" },
			text
		}?,
		marked-text
	}

div-subspeech =
	div-subspeech-continue | div-subspeech-interjection
	
div-subspeech-continue =
	element div {
		attribute class { "subspeech0" | "subspeech1" },
		element div { 
			attribute class { "speechType" },
			"Continue"
		},
		p-talker
	}
	
div-subspeech-interjection =
	element div {
		attribute class { "subspeech0" | "subspeech1" },
		element div { 
			attribute class { "speechType" },
			"Interjection"
		},
		(p-talker | p)
	}
	
